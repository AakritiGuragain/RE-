version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: reloop-postgres
    environment:
      POSTGRES_DB: reloop
      POSTGRES_USER: reloop_user
      POSTGRES_PASSWORD: reloop_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./reloop-backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - reloop-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reloop_user -d reloop"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: reloop-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reloop-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./reloop-backend
      dockerfile: Dockerfile
    container_name: reloop-backend
    environment:
      DATABASE_URL: postgresql://reloop_user:reloop_password@postgres:5432/reloop
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_SECRET: your-refresh-secret-change-in-production
      NODE_ENV: development
      PORT: 3000
      # Email configuration
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: your-email@gmail.com
      EMAIL_PASS: your-app-password
      EMAIL_FROM: ReLoop <noreply@reloop.com>
      # External service placeholders
      GOOGLE_CLOUD_PROJECT_ID: your-project-id
      AI_CLASSIFIER_API_URL: https://api.example.com
      AI_CLASSIFIER_API_KEY: your-ai-api-key
      STRIPE_SECRET_KEY: sk_test_your_stripe_key
      KHALTI_SECRET_KEY: your-khalti-secret
      # MQTT for IoT
      MQTT_BROKER_URL: mqtt://localhost:1883
      MQTT_USERNAME: reloop
      MQTT_PASSWORD: reloop_mqtt
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./reloop-backend:/app
      - /app/node_modules
      - uploads:/app/uploads
    networks:
      - reloop-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: reloop-frontend
    environment:
      VITE_API_URL: http://localhost:3000
      VITE_APP_NAME: ReLoop
      VITE_NODE_ENV: development
      VITE_ENABLE_ANALYTICS: true
      VITE_ENABLE_CHATBOT: true
      VITE_DEFAULT_LANGUAGE: en
      VITE_SUPPORTED_LANGUAGES: en,ne
      VITE_CURRENCY: NPR
      VITE_TIMEZONE: Asia/Kathmandu
    ports:
      - "5173:5173"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - /app/node_modules
    networks:
      - reloop-network
    depends_on:
      - backend
    restart: unless-stopped

  # MQTT Broker for IoT devices
  mosquitto:
    image: eclipse-mosquitto:2
    container_name: reloop-mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - reloop-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: reloop-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - reloop-network
    profiles:
      - production
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uploads:
  mosquitto_data:
  mosquitto_logs:

networks:
  reloop-network:
    driver: bridge
